from typing import Optional
from xml.etree import ElementTree as ET


def add_mathml_metadata(mathml_str: str) -> str:
    """
    Adds metadata annotations to a MathML string using <semantics> and <annotation>.

    Parameters:
        mathml_str (str): The MathML content as a string.

    Returns:
        str: The updated MathML string with metadata annotations.
    """
    # Parse the MathML string into an XML element
    try:
        root: ET.Element[str] = ET.fromstring(mathml_str)
    except ET.ParseError:
        # Failed to parse the string into xml
        return mathml_str

    # Ensure the root is <math>
    if root.tag != "{http://www.w3.org/1998/Math/MathML}math" and root.tag != "math":
        # Failed to find <math> tag as root
        return mathml_str

    # Define the MathML namespace
    NS = {"m": "http://www.w3.org/1998/Math/MathML"}
    ET.register_namespace("", NS["m"])

    # Create <semantics> if it's not already there
    existing_semantics: Optional[ET.Element[str]] = root.find("m:semantics", NS)

    if existing_semantics is not None:
        semantics: ET.Element[str] = existing_semantics
    else:
        # Move all children of <math> into <semantics>
        semantics = ET.Element("{http://www.w3.org/1998/Math/MathML}semantics")
        for child in list(root):
            semantics.append(child)
            root.remove(child)
        root.append(semantics)

    # Create metadata annotations
    metadata_1: ET.Element[str] = ET.Element("{http://www.w3.org/1998/Math/MathML}annotation")
    metadata_1.text = "Generated by OpenAI"
    metadata_1.set("encoding", "text/plain")

    # Add annotations only if they don't already exist
    existing_texts: set[str] = {ann.text for ann in semantics.findall("m:annotation", NS) if ann.text}
    if metadata_1.text not in existing_texts:
        semantics.append(metadata_1)

    # Return the modified XML as string
    return ET.tostring(root, encoding="unicode")
